# Entendendo o ciclo de vida do GIT





## 1 - GIT INIT

- Esse comando inicializa um repositório.

- Quando usamos o git init estamos criando um repositório dentro daquela pasta.





## Tracked ou Untracked 

#### Untracked são os arquivos o GIT não tem ciência deles e Tracked são os arquivos que o GIT tem ciência 

Dentro dos arquivos que são rastreados de fato pelo GIT ele se subdivide em três estágios:

**1 - Unmodified :** Arquivo que ainda não foi modificado.

**2 -  Modified :** É o arquivo Unmodified que sofreu modificação. 

**3 -  Staged :** Backstage dos arquivos que estão preparados para fazerem parte de outro tipo de agrupamento.







_Obs: Na aula passada passamos por essas diferentes fases de arquivos, por exemplo:_

**Quando utilizamos o Git add, nós pegamos um arquivo untracked e rodamos o git add que moveu aquele arquivo direto para o Staged (a área que ele está aguardando para entrar no palco).**



- Quando mandamos um arquivo para o estado de Staged, nós estamos preparando ele para o Commit (envelopamos todas essas modificações com uma significância e mensagem, carregando um autor e uma data específica). Após o Commit de fato, ele retorna esses arquivos para Unmodified. Ou seja, ele está pronto também para guardar outras modificações. 



### E o que os repositórios significam?



- Primeiramente separamos dois ambientes: **A nossa máquina** e o **Servidor**.
- Existem tanto o GIT na minha máquina, e o GIT em um servidor que é o GitHub (o repositório remoto). Ou seja, as modificações que eu faço na minha máquina não repercutem imediatamente no repositório remoto. 
- No nosso ambiente de desenvolvimento nós temos o **Repositório de Trabalho** e o **Staging Area**. E os arquivos sempre ficarão modificando entre esses dois ambientes. 
- Quando realizamos um commit, o arquivo passa a integrar o **Repositório Local** epositório local, e por sua vez esse repositório local pode ser empurrado para um repositório remoto. 







### Fluxo de trabalho dos estágios do GIT



**Repositório de Trabalho** -(git add) -> **Staging Area** -(git commit)->  **Repositório Local**





### GIT status

- Um comando do Git que mostra o estado dos arquivos que estou trabalhando. Posso ver por exemplo se ele está Untracked, Tracked, Staged e etc. 

_Obs: outro comodando interessante para o GIT é o "mv" que significa move. Através desse comando podemos mover nossas pastas._

_Exemplo: mv strogonoff.md.txt ./receitas -> Sendo receitas uma outra pasta_



### Quando mudamos um arquivo de uma pasta para outra





- O GIT acaba identificando como arquivos deletados. Nesse caso caso queiramos adicionar os arquivos alterados para Staged novamente, temos que rodar o git add, adicionando especificamente esses arquivos e a pasta para onde foram movidos.



_Exemplo: git add strogonoff.md.txt receitas/_



### GIT ADD *

- Este é um comando utilizado para adicionar todos os arquivos que sofreram modificações na pasta. 











































 







