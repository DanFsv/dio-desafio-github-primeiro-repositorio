
LINGUAGENS DE PROGRAMAÇÃO


Objetivo: Apresentar os principais paradigmas, fazendo uma introdução sobre a origem das linguagens e sobre o mundo da programação de um modo geral.


INTRODUÇÃO

#Compreender as dificuldades enfrentadas

#Fundamentos da Computaçãop

#O processo de pensamento



Fato importante: Toda evolução tecnlógica inicia-se pelo hardware e depois no software.







HISTÓRIA DA COMPUTAÇÃO


Desde o surgimento do ábaco, os dispositivos utilizados para realizar cálculos foram revolucionários para a sociedade. E depois de um grande lapso temporal, na segunda guerra mundial, houveram massivos investimentos na computação de modo a impulsionar a tecnologia de guerra das nações envolvidas. 

ENIAC abriu a porta para o início dos computadores digitais. Ele recebia instruções por fios e seu processamento era lento. 

COLOUSSUS E EDVAC também foram computadores precursores.

1985 - Princípio dos Computadores Pessoais (PC)  





E QUANTO A HISTÓRIA DAS LINGUAGENS DE PR0OGRAMAÇÃO


1949 - Surgimento da primeira linguagem de programação (Linguagem de montagem de máquina) - Assembly

Anos 50 - Surgiram mais linguagens de programação como o COBOL, Fortran e etc. 

Anos 60 e 70 - Surgiram os paradigmas mais próximos dos atuais, Linguagem C

Anos 90 - Com o advento da programação orientada a objetos, surgiram algumas das principais linguagens que utilizamos atualmente. Como JavaScript, Java, Ruby, C#, Python e etc. 

Anos 2000 - TypeScript, Swift e dentre outras foram surigndo com funções específicas e acarretaram na evolução da tecnologia. 








CONCLUSÃO DESSA HISTÓRIA


É possível concluir que os problemas computacionais são complexos e cada era possui sua dimensão de problemas, porém, os desafios são bem parecidos. Problemas de decisão, probelemas de busca e problemas de otimização são alguns dos problemas que afligem a atualidade. 








MAS POR DEFINITIVO, O QUE É UMA LINGUAGEM DE PROGRAMAÇÃO?

É um método padronizado composto por um conjunto de regras sintáticas e semânticas de implemtanetação de um código fonte. 





COMO O COMPUTADOR ENTENDE UM PROGRAMA?


Código fonte -> Tradução ou Interpratação


"Um programa é um amontoado de palavras senão for possível que o compútador entenda"


Para isso existe o processo de tradução que está relacionado a compilação





PROCESSO DE TRADUÇÃO

###Compilador -> Programa de Alto nível (Programa fonte) -> Linguagem de máquina (Assembly Progama objeto)

Exemplos de linguagens Traduzidas : C++ e Java





PROCESSO DE INTERPRETAÇÃO

Código fonte (Python) -> Interpretador puro -> Execução dos resultados

Obs: Não gera uma linguagem de máquina. 

A interpretação é mais lenta porém gera mais flexibilidade

Exemplos de linguagens interpretadas: Ruby Python, JavaScript






CARACTERÍSTICAS DE UM PROGRMA

1 - Existem boas práticas em programação? Sim, existem. 

2 - Basta sair programando? Não...




No desenvolvimento de programas é necessário um programa possuir:


1 - Legibilidade: Uma boa leitura do código 

2 - Regibilidade: Seja bem escrito

3 - Confiabilidade: Confiável, ou seja, faça o que foi planejado de forma eficiente.

4 - Custo: Seja de baixo custo.






LEGIBILIDADE:


#1 - Facilidade de leitura -> Estado que é legível

#2 - Compreensão

#3 - Ortogonalidade: Coerência das instruções

#4 - Definição adequada das estruturas






REDIGIBILIDADE:


#1 - Pode conflitar com a legibilidade

#2 - Ortogonalidade

#3 - Simplicidade da escrita

#4 - Suporte à abstração

#5 - Reuso do código

#6 - Expressividade -> operador ++ e uso do for por exemplo






CONFIABILIDADE:


#1 - Verficação de tipos

#2 - Trata exceções 

#4 - Uso de ponteiros 

#5 - Compatibilidade entre compiladores






CUSTO:

#1 - Treinamento 

#2 - Codificação

#3 - Compilação

#4 - Execução

#5 - Infraestrutura 






OUTRAS CARACTERÍSTICAS 

Atualizações / Uso para IA / Disponibilidade de ferramentas / Comunidade ativa / Adoção pelo mercado






ANÁLISES DE CÓDIGO:


Fases de compilação -> Léxica / Sintaxe / Semântica




ANÁLISE LÉXICA

A função dela é fazer a leitura do programa fonte, caractere por caractere e agrupar os caracteres em lexemas. Ou seja, particionar, classificar e eliminar.

Todos os elementos léxicos utilizados são conhecidos como tokens: Identificadores, palavras reservadas, números, strings.

Obs: Essa análise também elemina elem,entos como caracteres de espaços em branco e comentários por exemplo. 




ANÁLISE SINTÁTICA 


Sintaxe: "Componente do sistema linguístico que interligam os constituintes da sentença, atribuindo-lhe uma estrutura"

-Corretude do Programa


ANÁLISE SEMÂNTICA


É o estudo do significado. Incide sobre a reção entre signfiicantes, como: palavras, frases, sinais e símbolos"

-Lógica do programa

Obs: Erro de semântica -> Não faz  o que é esperado. 

If (x = 0){
printf("O valor é nulo\n");
}


O correto seria: 

if(x==){
printf("O valor é nulo\n")
}







PARADIGMAS DA PROGRAMAÇÃO:



O que é um paradigma?


Definição formaç: "Forma de resolução de problemas com direteizes e limitações específicas de cada paradigma utilizando linguagem de programação."



Classificação:

1 -  Orientação à objeto -> 

2 -  Procedural -> Chamadas sucessivas e procedimentos separados

3 -  Funcional -> Instruções baseadas em funções

4 -  Estruturado -> Estrutura de blocos aninhados 

5 -  Computação distribuída -> Funções executados de forma independente

6 -  Lógico -> 








PARADIGMA ESTRUTURADO

Conceitos: 

1 - Sequência

2 - Decisão (Teste lógico)

3 - Iteração (Funções, laços e condições)


Ênfase em sequência 



##Utilização:

1 - Problemas simples e diretos
2 - Aprender programação


POO ainda não compreendida por muitos



Exemplo de função em C:

function fatorial (x){
 
   if(x>1){
	return x*fatorial(x-1);
   }
}




PARADIGMA À OBJETO


Paradigma de programação baseado na utilização de objetos e suas interações

Análogo ao mundo real.



#O que é um objeto?

Um violão, um brinquedo, um ônibus, e etc.


Mas...

Uma mulher, um cachorro, ou uma criança são objetos? Na programação sim.


Nesse caso conseguimos generalizar a uma classe. 

"Um objeto é descrito por características específicas, comportamentos e estado."

O que tenho (Características)


O que sou capaz de fazer (Comportamentos)

Como faço (Estado)





EXEMPLO: 


"Queremos exemplificar a Classe de uma caneta".


O que tenho (Característica)

Modelo 
Cor 
Carga
Corpo
Tampa
Ponta


Sou capaz de fazer (Comportamento)

Escrever
Desenhar
Rabiscar
Pintar
Destampar


Como faço (Estado)

Tampada
Destamapada
Em uso



O que tenho -> Atributos 

Sou capaz de fazer -> Métodos

Como faço -> Estados


Isso reflete o conceito de orientação a objetos





PONTO DE VISTA DE PROGRAMAÇÃO


-POO

A classe aloca em memória uma instância dessa classe, que é um objeto. E ela possui operações associadas que são os métodos. 


-Estruturada

Temo a Alocação em memória e Operações associadas -> Variável





PILARES DE ORIENTAÇÃO A OBJETO

1 - Herança
2 - Ecapsulamento
3 - Polimorfismo
4 - Abstração





HERANÇA

Uma classe filha herda as caracterísitcas de uma classe mãe. A classe mãe geralmente tem um comportamento mais feral e a filha mais escpecíficos.





VANTAGENS DESSES DOIS PARADIGMAS

POO -> Reuso de código

PE -> Problemas específicos e diretos



















 















