Quais são esses objetos?

1 - BLOBS

2 - TREES

3 - COMMITS




Obs: Vamos ater somente as funcionalidades básicas desses 3 objetos.





1 - BLOBS


Os arquivos ficam guardados dentro do blob. Esse objeto contém metadadops dentro dele. Nele, contém o tamanho desse arquivo. Nesse caso "\0" e o que está dentro do arquivo.


echo 'conteudo' | git hash-object --stdin

	fc31e91b26... -> o sha1 dessa string


E se eu usar o:

echo -e 'conteudo' | openssl sha1

	65b0d0dda479... -> outro sha1 


E porque ele gerou outro sha1?


Porque os arquivos do git guardam metadados dentro deles, e o objeto BLOB não é diferente. Pois ele carrega o tipo do objeto, o tamanho, "/0" e o conteúdo de fato desse arquivo. 


Passando novamente a função:

echo -e 'blob 9\0conteudo'  -> O blob... O tamanho = 9.... a "\0" ...e o conteudo de fato.

	f31e91b26c...

E ele gera o mesmo conteúdo!





MAS O QUE ISSO REPRESENTA


Que o git armazena metadados dentro dos objetos, como tamanho, tipo e dentre outros. 





TREE


As trees armazenam blobs. A árvore guarda o nome do arquivo, diferentemente do blob. Elas podem apontar tantos para os blobs quanto para outras árvores. Faz sentido que o Git usa os objetos de trees pois eles apontam para outras trees. 

Existe uma hierarquia, se mudar uma virgula, mudamos o blob e consequentemente o tree. 




HIERARQUIA: 


----------- TREE---------
README     Rakefile    lib
 |           |          |
 V           V          V
BLOB       BLOB       TREE
                        |
                   simplegit.rb
                        |
                        v
                       BLOB


COMMIT

Esse é o objeto mais importante de todos
É aquele que dará sentido ao que estamos fazendo no git

1 - O Commit aponta para a tree  --> s4a5sq1
2 - Aponta para o parente --> a98acq1
3 - Também para o autor --> perkles
4 - E uma mensagem --> "inicia..."
5 - Timestamp --> Ele carrega a data e hora de quando foi submetido


Você dá significado a esses arquivos do commit através da mensagem

Alteramos o Sha1 da blob -> Alteramos o conteúdo da árvore -> Reflete no commit

--O commit representa que só você foi responsável por aquela alteração do código, gerando segurança para o seu código que está sendo submetido. Isso fica claro através do histórico de commits, pois ele é único para cada autor. 



ENTÃO PORQUE O GIT É UM SISTEMA DISTRIBUÍDO E SEGURO?

Imagine que você tem o seu código e seu repositório hosteado na nuvem, por exemplo no Github. O código que está lá representa a versão mais atualizada do seu código. E vamos supor que tenham 30 pessoas trabalhando nesse código. E em todas as máquinas dessas 30 pessoas, existe também a versão desse código. Mesmo que aconteça alguma coisa com os servidores que suportam o código na plataforma, todos terão uma versão confiável do código em suas máquinas. 


--Os commits são muito difíceis de serem alterados. 







